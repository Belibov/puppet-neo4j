# == Class: neo4j
#
# Installs Neo4J (http://www.neo4j.com) on RHEL/Ubuntu/Debian from their
# distribution tarballs downloaded directly from their site.
#
# === Parameters
#
# [*address*]
#   Default: $::ipaddress
#
# [*allow_remote_connections*]
#   Boolean.
#   Default: true
#
# [*auth_enabled*]
#   Boolean. Allow or disallow authentication to access neo4j
#   Default: true
#
# [*auth_admin_user*]
#   Default: undef
#
# [*auth_admin_password*]
#   Default: undef
#
# [*auth_users*]
#   Default: undef
#
# [*cache_memory_ratio*]
#   Available starting version 2.1.5
#   Default: undef
#
# [*cache_type*]
#   Default: undef
#
# [*data_prefix*]
#   Prefix, indicating the directory where neo4j will write data.
#   Default: '/opt/neo4j'
#
# [*data_rrdb*]
#   Indicates the location of the servers round-robin database directory. Can be
#   - absolute path
#   - relative path
#   - undef: default ot the database data directory
#
# [*edition*]
#   String. One of ['community', 'enterprise']
#   Default: 'community'
#
# [*group*]
#   Indicates the group the neo4j user belongs to.
#   Default: neo4j
#
# [*ha_enabled*]
#   Boolean
#   Default: false
#
# [*ha_server_id*]
#   Default: undef
#
# [*ha_cluster_port*]
#   Default: '5001'
#
# [*ha_data_port*]
#   Default: '6001'
#
# [*ha_pull_interval*]
#   Default: undef
#
# [*ha_tx_push_factor*]
#   Default: undef
#
# [*ha_tx_push_strategy*]
#   Default: undef
#
# [*ha_allow_init_cluster*]
#   Default: true
#
# [*ha_slave_only*]
#   Default: false
#
# [*http_log_enabled*]
#   Boolean. Enable/disable HTTP logging.
#   Default: false
#
# [*http_log_dir*]
#   Indicates the http logging directory. When given, should be absolute path.
#   Default: 'data/log'
#
# [*install_prefix*]
#   Prefix, indicating the directory where neo4j will be installed.
#   Default: '/opt/neo4j/data/'
#
# [*jvm_init_memory*]
#   String.
#   Default: '1024'
#
# [*jvm_max_memory*]
#   String.
#   Default: '1024'
#
# [*keep_logical_logs*]
#   Default: '7 days'
#
# [*keystore_location*]
#   Indicates location of internally generated keystore.
#   Default: 'data/keystore'
#
# [*newrelic_jar_path*]
#   Default: undef
#
# [*node_cache_array_fraction*]
#   Default: undef
#
# [*node_cache_size*]
#   Default: undef
#
# [*nodestore_memory*]
#   Default: undef
#
# [*propertystore_memory*]
#   Default: undef
#
# [*propertystore_strings_memory*]
#   Default: undef
#
# [*propertystore_arrays_memory*]
#   Default: undef
#
# [*relationship_cache_array_fraction*]
#   Default: undef
#
# [*relationship_cache_size*]
#   Default: undef
#
# [*relationshipstore_memory*]
#   Default: undef
#
# [*service_ensure*]
#   Default: running
#
# [*service_enable*]
#   Default: true
#
# [*tls_certificate_file*]
#   Indicates certificate location. Will be autogenerated if file does not exist.
#   Default: 'conf/ssl/snakeoil.cert'
#
# [*tls_private_key*]$
#   Indicates private key location. Will be autogenerated if file does not exist.
#   Default: 'conf/ssl/snakeoil.key'
#
# [*user*]
#   Indicates the user under which the neo4j service is running.
#   Default: neo4j
#
# [*version*]
#   String, indicating the neo4j version
#
# [*webserver_port*]
#   Integer, indicating the port on which the neo4j server will listen.
#
# === Examples
#
#  class { 'neo4j' :
#    version => '2.0.3',
#    edition => 'enterprise',
#  }
#
# See additional examples in the Readme.md file.
#
# === Authors
#
# Marc Lambrichs <marc.lambrichs@gmail.com>
#
# === Copyright
#
# Copyright 2016 Marc Lambrichs, unless otherwise noted.
#
class neo4j (
  $address                           = $neo4j::params::address,
  $allow_remote_connections          = $neo4j::params::allow_remote_connections,
  $auth_admin_password               = $neo4j::params::auth_admin_password,
  $auth_admin_user                   = $neo4j::params::auth_admin_user,
  $auth_enabled                      = $neo4j::params::auth_enabled,
  $auth_users                        = $neo4j::params::auth_users,
  $cache_memory_ratio                = $neo4j::params::cache_memory_ratio,
  $cache_type                        = $neo4j::params::cache_type,
  $data_prefix                       = undef,
  $data_rrdb                         = undef,
  $edition                           = $neo4j::params::edition,
  $group                             = $neo4j::params::group,
  $ha_allow_init_cluster             = $neo4j::params::ha_allow_init_cluster,
  $ha_enabled                        = $neo4j::params::ha_enabled,
  $ha_server_id                      = $neo4j::params::ha_server_id,
  $ha_cluster_port                   = $neo4j::params::ha_cluster_port,
  $ha_data_port                      = $neo4j::params::ha_data_port,
  $ha_pull_interval                  = $neo4j::params::ha_pull_interval,
  $ha_slave_only                     = $neo4j::params::ha_slave_only,
  $ha_tx_push_factor                 = $neo4j::params::ha_tx_push_factor,
  $ha_tx_push_strategy               = $neo4j::params::ha_tx_push_strategy,
  $http_port                         = $neo4j::params::http_port,
  $http_log_enabled                  = $neo4j::params::http_log_enabled,
  $http_log_dir                      = undef,
  $https_enabled                     = $neo4j::params::https_enabled,
  $https_port                        = $neo4j::params::https_port,
  $install_prefix                    = $neo4j::params::install_prefix,
  $jvm_init_memory                   = $neo4j::params::jvm_init_memory,
  $jvm_max_memory                    = $neo4j::params::jvm_max_memory,
  $keep_logical_logs                 = $neo4j::params::keep_logical_logs,
  $keystore_location                 = undef,
  $newrelic_jar_path                 = $neo4j::params::newrelic_jar_path,
  $node_cache_array_fraction         = $neo4j::params::node_cache_array_fraction,
  $node_cache_size                   = $neo4j::params::node_cache_size,
  $nodestore_memory                  = $neo4j::params::nodestore_memory,
  $propertystore_arrays_memory       = $neo4j::params::propertystore_arrays_memory,
  $propertystore_memory              = $neo4j::params::propertystore_memory,
  $propertystore_strings_memory      = $neo4j::params::propertystore_strings_memory,
  $relationship_cache_array_fraction = $neo4j::params::relationship_cache_array_fraction,
  $relationship_cache_size           = $neo4j::params::relationship_cache_size,
  $relationshipstore_memory          = $neo4j::params::relationshipstore_memory,
  $rrdb_location                     = $neo4j::params::rrdb_location,
  $service_enable                    = $neo4j::params::service_enable,
  $service_ensure                    = $neo4j::params::service_ensure,
  $tls_certificate_file              = $neo4j::params::tls_certificate_file,
  $tls_key_file                      = $neo4j::params::tls_key_file,
  $user                              = $neo4j::params::user,
  $version                           = $neo4j::params::version,
) inherits neo4j::params {

  validate_absolute_path(
    $install_prefix
  )

  validate_ip_address(
    $address
  )

  validate_bool(
    $allow_remote_connections,
    $auth_enabled,
    $ha_allow_init_cluster,
    $ha_enabled,
    $ha_slave_only,
    $http_log_enabled,
    $https_enabled,
    $service_enable
  )

  validate_integer([
    $ha_cluster_port,
    $ha_data_port,
    $http_port,
    $https_port,
    $jvm_init_memory,
    $jvm_max_memory
  ])

  validate_string(
    $auth_admin_user,
    $auth_admin_password,
    $group,
    $rrdb_location,
    $user
  )

  #http://www.neo4j.com/customer/download/neo4j-enterprise-2.1.4-unix.tar.gz
  $package_name    = "neo4j-${edition}-${version}"
  $package_tarball = "${package_name}.tgz"
  $neo4j_home      = "${install_prefix}/${package_name}"

  if ( $::kernel != 'Linux' ) {
    fail('Only Linux is supported at this time.')
  }

  if ( versioncmp( $version, '2.0.0' ) < 0 ) {
    fail('Only versions >= 2.0.0 are supported at this time.')
  }

  if !( $edition in ['community', 'enterprise'] ){
    fail('Only edtions \'community\' and \'enterprise\' are present.')
  }

  if ( $data_prefix ) {
    if ( validate_absolute_path($data_prefix) ) {
      fail('$data_prefix should contain an absolute path')
    }
    $data_dir = $data_prefix
  } else {
    $data_dir = "${install_prefix}/data"
  }

  if ( $http_log_dir ) {
    if (validate_absolute_path($http_log_dir) ) {
      fail('$htp_log_dir should contain an absolute path')
    }
    $http_logfile = "${http_log_dir}/http.log"
  } else {
    $http_logfile = "${data_dir}/log/http.log"
  }

  if ( $keystore_location ) {
    $keystore = "${data_dir}/${keystore_location}"
  } else {
    $keystore = "${data_dir}/${neo4j::params::keystore_location}"
  }

  if ( $data_rrdb ) {
    $rrdb = "${data_dir}/${data_rrdb}"
  } else {
    $rrdb = "${data_dir}/${neo4j::params::rrdb_location}"
  }

  if ( $ha_enabled ) {
    if ( !is_numeric( $ha_server_id ) ) {
      fail('The Server Id value must be specified and must numeric.')
    }
  }

  if ( $cache_memory_ratio ) {
    if ( versioncmp($version, '2.1.5') < 0 ) {
      warning("Ignoring the cache_memory_ratio value due to version being '${version}'.")
    } elsif ( ! is_numeric($cache_memory_ratio) or
              $cache_memory_ratio < 0.0 or
              $cache_memory_ratio > 100.0) {
        fail("Invalid cache_memory_ratio value of '${cache_memory_ratio}'. It must be in the range of 0.0 to 100.0.")
    }
  }

  ## define the user and group the neo4j service will be running.
  group { $group:
    ensure => present
  } ->
  user { $user:
    ensure => present,
    gid    => $group,
    shell  => '/bin/bash',
    home   => $install_prefix
  }

  ## define the default file settings
  File {
    owner => $user,
    group => $group,
  }

  Exec {
    path => ['/usr/bin', '/usr/local/bin', '/bin', '/sbin']
  }

  anchor { 'neo4j::begin': } ->
  class{'::neo4j::install':} ->
  class{'::neo4j::config':} ~>
  class{'::neo4j::service':}
  anchor { 'neo4j::end': }
}
